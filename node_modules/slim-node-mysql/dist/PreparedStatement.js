"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreparedStatement = void 0;
const PreparedStatementError_1 = require("./PreparedStatementError");
class PreparedStatement {
    constructor(sqlString, parameters) {
        this.sqlString = sqlString;
        this.parameters = parameters;
    }
    prepare() {
        let preparedSql = this.sqlString;
        const preparedValues = [];
        let match;
        while ((match = preparedSql.match(/@([A-Za-z_]+)/))) {
            const variableName = match[0];
            const baseVariableName = match[1];
            if (!(baseVariableName in this.parameters)) {
                throw new PreparedStatementError_1.PreparedStatementError(`Missing prepared statement value for SQL variable '${variableName}'`);
            }
            preparedSql = preparedSql.replace(variableName, '?');
            preparedValues.push(this.parameters[baseVariableName]);
        }
        return { preparedSql, preparedValues: preparedValues.length > 0 ? preparedValues : null };
    }
}
exports.PreparedStatement = PreparedStatement;
//# sourceMappingURL=PreparedStatement.js.map