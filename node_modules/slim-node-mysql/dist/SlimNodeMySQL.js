"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlimNodeMySQL = void 0;
const SlimNodeMySQLPool_1 = require("./SlimNodeMySQLPool");
class SlimNodeMySQL {
    constructor(config) {
        this.pool = new SlimNodeMySQLPool_1.SlimNodeMySQLPool(config);
    }
    query(sql, parameters) {
        if (parameters) {
            return this.pool.query(sql, parameters);
        }
        return this.pool.query(sql);
    }
    execute(sql, parameters) {
        if (parameters) {
            return this.pool.query(sql, parameters);
        }
        return this.pool.query(sql);
    }
    getOne(sql, parameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const results = yield this.query(sql, parameters);
            if (results.length === 0) {
                return null;
            }
            return results[0];
        });
    }
    getValue(column, sql, parameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.getOne(sql, parameters);
            if (!result) {
                return null;
            }
            return result[column];
        });
    }
    exists(sql, parameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.getOne(sql, parameters);
            return result !== null;
        });
    }
    close() {
        var _a;
        (_a = this.pool) === null || _a === void 0 ? void 0 : _a.close();
        this.pool = null;
    }
}
exports.SlimNodeMySQL = SlimNodeMySQL;
//# sourceMappingURL=SlimNodeMySQL.js.map